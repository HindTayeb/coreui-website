{"version":3,"sources":["webpack:///../src/components/carousel/CCarousel.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","CCallout","CCarousel","CCarouselCaption","CCarouselControl","CCarouselIndicators","CCarouselInner","CCarouselItem","slides","className","src","alt","direction","color","of","isMDXComponent"],"mappings":"sWAiBaA,G,UAAe,S,uNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAM5E,kBACE,GAAM,gBADR,gBAGA,iNACA,8CAA6B,iBAAGC,WAAW,IACvC,KAAQ,0CADiB,uBAA7B,iLAGA,kBACE,GAAM,WADR,WAGA,6SACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,skBAAulBC,SAAO,GAC/nBL,QACAH,kBACAS,eACAC,UACAC,aACAC,cACAC,qBACAC,qBACAC,wBACAC,mBACAC,kBACAC,YAZ+nB,gBAa/nBlB,IAb+nB,EAc/nBH,eAd+nB,GAe9nBO,QAAQ,eACZ,WACK,OAAO,YAAC,IAAD,CAAWA,QAAQ,aAC1B,YAAC,IAAD,CAAgBA,QAAQ,kBACtB,YAAC,IAAD,CAAeA,QAAQ,iBACrB,mBAAKe,UAAU,gBAAgBC,IAAKF,IAAO,GAAIG,IAAI,aAErD,YAAC,IAAD,CAAejB,QAAQ,iBACrB,mBAAKe,UAAU,gBAAgBC,IAAKF,IAAO,GAAIG,IAAI,aAErD,YAAC,IAAD,CAAejB,QAAQ,iBACrB,mBAAKe,UAAU,gBAAgBC,IAAKF,IAAO,GAAIG,IAAI,cAGvD,YAAC,IAAD,CAAkBC,UAAU,OAAOlB,QAAQ,qBAC3C,YAAC,IAAD,CAAkBkB,UAAU,OAAOlB,QAAQ,yBAI/C,YAAC,IAAD,CAAUmB,MAAM,OAAOnB,QAAQ,YACjC,qEACA,2YAIE,kBACE,GAAM,OADR,OAGA,kBACE,GAAM,aADR,aAGA,YAAC,IAAD,CAAOoB,GAAIZ,IAAWR,QAAQ,UAC9B,kBACE,GAAM,oBADR,oBAGA,YAAC,IAAD,CAAOoB,GAAIX,IAAkBT,QAAQ,UACrC,kBACE,GAAM,oBADR,oBAGA,YAAC,IAAD,CAAOoB,GAAIV,IAAkBV,QAAQ,UACrC,kBACE,GAAM,uBADR,uBAGA,YAAC,IAAD,CAAOoB,GAAIT,IAAqBX,QAAQ,UACxC,kBACE,GAAM,kBADR,kBAGA,YAAC,IAAD,CAAOoB,GAAIR,IAAgBZ,QAAQ,UACnC,kBACE,GAAM,iBADR,iBAGA,YAAC,IAAD,CAAOoB,GAAIP,IAAeb,QAAQ,gB,qNAKtCH,EAAWwB,gBAAiB","file":"component---src-components-carousel-c-carousel-mdx-f052a6d05618f5f7e5aa.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/lukaszholeczek/CoreUI/@coreui/react-v4/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { CCallout } from '../callout/CCallout';\nimport { CCarousel } from './CCarousel.tsx';\nimport { CCarouselCaption } from './CCarouselCaption.tsx';\nimport { CCarouselControl } from './CCarouselControl.tsx';\nimport { CCarouselIndicators } from './CCarouselIndicators.tsx';\nimport { CCarouselInner } from './CCarouselInner.tsx';\nimport { CCarouselItem } from './CCarouselItem.tsx';\nimport { slides } from './slides.ts';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <h2 {...{\n      \"id\": \"how-it-works\"\n    }}>{`How it works`}</h2>\n    <p>{`The React carousel is a slideshow for cycling within a group of content. It runs with a group of images, text, or html elements. It also incorporates support for previous/next buttons.`}</p>\n    <p>{`In browsers where the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/TR/page-visibility/\"\n      }}>{`Page Visibility API`}</a>{` is supported, the carousel will avoid sliding when the webpage is not visible to the user (such as when the browser tab is inactive, the browser window is minimized, etc.).`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`Carousels don't automatically normalize slide dimensions. As such, you may want to use extra utilities or custom methods to properly size content. While carousels support previous/next controls and indicators, they're not explicitly expected. Add and customize as you see fit.`}</p>\n    <Playground __position={0} __code={'() => {\\n  return (\\n    <CCarousel>\\n      <CCarouselInner>\\n        <CCarouselItem>\\n          <img className=\\\"d-block w-100\\\" src={slides[0]} alt=\\\"slide 1\\\" />\\n        </CCarouselItem>\\n        <CCarouselItem>\\n          <img className=\\\"d-block w-100\\\" src={slides[1]} alt=\\\"slide 2\\\" />\\n        </CCarouselItem>\\n        <CCarouselItem>\\n          <img className=\\\"d-block w-100\\\" src={slides[2]} alt=\\\"slide 3\\\" />\\n        </CCarouselItem>\\n      </CCarouselInner>\\n      <CCarouselControl direction=\\\"prev\\\" />\\n      <CCarouselControl direction=\\\"next\\\" />\\n    </CCarousel>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CCallout,\n      CCarousel,\n      CCarouselCaption,\n      CCarouselControl,\n      CCarouselIndicators,\n      CCarouselInner,\n      CCarouselItem,\n      slides,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        return <CCarousel mdxType=\"CCarousel\">\n        <CCarouselInner mdxType=\"CCarouselInner\">\n          <CCarouselItem mdxType=\"CCarouselItem\">\n            <img className=\"d-block w-100\" src={slides[0]} alt=\"slide 1\" />\n          </CCarouselItem>\n          <CCarouselItem mdxType=\"CCarouselItem\">\n            <img className=\"d-block w-100\" src={slides[1]} alt=\"slide 2\" />\n          </CCarouselItem>\n          <CCarouselItem mdxType=\"CCarouselItem\">\n            <img className=\"d-block w-100\" src={slides[2]} alt=\"slide 3\" />\n          </CCarouselItem>\n        </CCarouselInner>\n        <CCarouselControl direction=\"prev\" mdxType=\"CCarouselControl\" />\n        <CCarouselControl direction=\"next\" mdxType=\"CCarouselControl\" />\n      </CCarousel>;\n      }}\n    </Playground>\n    <CCallout color=\"info\" mdxType=\"CCallout\">\n  <h5>Conveying meaning to assistive technologies</h5>\n  <p>\n    Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies â€“ such as screen readers. Ensure that information denoted by the color is either obvious from the content itself (e.g. the visible text), or is included through alternative means, such as additional text hidden with the `.visually-hidden` class.\n  </p>\n    </CCallout>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <h3 {...{\n      \"id\": \"ccarousel\"\n    }}>{`CCarousel`}</h3>\n    <Props of={CCarousel} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"ccarouselcaption\"\n    }}>{`CCarouselCaption`}</h3>\n    <Props of={CCarouselCaption} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"ccarouselcontrol\"\n    }}>{`CCarouselControl`}</h3>\n    <Props of={CCarouselControl} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"ccarouselindicators\"\n    }}>{`CCarouselIndicators`}</h3>\n    <Props of={CCarouselIndicators} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"ccarouselinner\"\n    }}>{`CCarouselInner`}</h3>\n    <Props of={CCarouselInner} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"ccarouselitem\"\n    }}>{`CCarouselItem`}</h3>\n    <Props of={CCarouselItem} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}